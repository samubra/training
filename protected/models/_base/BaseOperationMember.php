<?php

/**
 * This is the model base class for the table "operation_member".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "OperationMember".
 *
 * Columns in table "operation_member" available as properties of the model,
 * and there are no model relations.
 *
 * @property string $id
 * @property string $uid
 * @property string $class_id
 * @property string $class_num
 * @property string $isnew
 * @property string $health
 * @property string $professional_title
 * @property string $post
 * @property string $unit_name
 * @property integer $operation_type
 * @property string $certificate_num
 * @property string $certificate_type
 * @property string $issue_date
 * @property string $theory_score
 * @property string $operating_score
 * @property integer $status
 * @property string $remark
 * @property string $modified
 *
 */
abstract class BaseOperationMember extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'operation_member';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'OperationMember|OperationMembers', $n);
	}

	public static function representingColumn() {
		return 'class_num';
	}

	public function rules() {
		return array(
			array('uid', 'required'),
			array('operation_type, status', 'numerical', 'integerOnly'=>true),
			array('uid, class_id, certificate_type', 'length', 'max'=>11),
			array('class_num, modified', 'length', 'max'=>10),
			array('isnew', 'length', 'max'=>1),
			array('health, professional_title, post, unit_name, remark', 'length', 'max'=>200),
			array('certificate_num', 'length', 'max'=>19),
			array('theory_score, operating_score', 'length', 'max'=>5),
			array('issue_date', 'safe'),
			array('class_id, class_num, isnew, health, professional_title, post, unit_name, operation_type, certificate_num, certificate_type, issue_date, theory_score, operating_score, status, remark, modified', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, uid, class_id, class_num, isnew, health, professional_title, post, unit_name, operation_type, certificate_num, certificate_type, issue_date, theory_score, operating_score, status, remark, modified', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'uid' => Yii::t('app', 'Uid'),
			'class_id' => Yii::t('app', 'Class'),
			'class_num' => Yii::t('app', 'Class Num'),
			'isnew' => Yii::t('app', 'Isnew'),
			'health' => Yii::t('app', 'Health'),
			'professional_title' => Yii::t('app', 'Professional Title'),
			'post' => Yii::t('app', 'Post'),
			'unit_name' => Yii::t('app', 'Unit Name'),
			'operation_type' => Yii::t('app', 'Operation Type'),
			'certificate_num' => Yii::t('app', 'Certificate Num'),
			'certificate_type' => Yii::t('app', 'Certificate Type'),
			'issue_date' => Yii::t('app', 'Issue Date'),
			'theory_score' => Yii::t('app', 'Theory Score'),
			'operating_score' => Yii::t('app', 'Operating Score'),
			'status' => Yii::t('app', 'Status'),
			'remark' => Yii::t('app', 'Remark'),
			'modified' => Yii::t('app', 'Modified'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id, true);
		$criteria->compare('uid', $this->uid, true);
		$criteria->compare('class_id', $this->class_id, true);
		$criteria->compare('class_num', $this->class_num, true);
		$criteria->compare('isnew', $this->isnew, true);
		$criteria->compare('health', $this->health, true);
		$criteria->compare('professional_title', $this->professional_title, true);
		$criteria->compare('post', $this->post, true);
		$criteria->compare('unit_name', $this->unit_name, true);
		$criteria->compare('operation_type', $this->operation_type);
		$criteria->compare('certificate_num', $this->certificate_num, true);
		$criteria->compare('certificate_type', $this->certificate_type, true);
		$criteria->compare('issue_date', $this->issue_date, true);
		$criteria->compare('theory_score', $this->theory_score, true);
		$criteria->compare('operating_score', $this->operating_score, true);
		$criteria->compare('status', $this->status);
		$criteria->compare('remark', $this->remark, true);
		$criteria->compare('modified', $this->modified, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}